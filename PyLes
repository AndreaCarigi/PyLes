"""
# Dimensioning of piles

The aim of this code is to define the bearing capacity of a pile.
The total bearing capacity is given by the sum of base capacity and lateral capacity minus the weight of the pile itself
The base and lateral contribution are given in function of the limit capacities reduced by a correction factor to take
into account that the limit capacities are mobilized only after a certain settlement that could be higher than the
admissible settlement.

The base and lateral contribution also depend on the type of soil (cohesive or cohesionless) and the way it is realized
(driven or drilled), in detail:
- Driven in cohesive soil:

    - Base limit capacity:
        Q_b=q_lim*A_b=(c_u*N_c+sigma_v0)*A_b
        where N_c=9 due to the depth of the base of the pile, c_u the undrained cohesion, sigma_v0 is the vertical
        total load at the base of the pile and A_b is the area of the base of the pile.
        For driven piles this value is corrected with the coefficient proposed by Meyeroff (1983)
        R_c=(D+0.5)/(2*D)<=1
        where D is the diameter of the pile.
        
    - Lateral limit capacity:
        fs = (1 - sin(phi)) * tan(phi) * (sigma_v0 - u) * OCR ** 0.5
        where phi is the friction angle, sigma_v0 is the total vertical stress at the base of the pile, OCR is
        the overconsolidation ratio. This formulation has been proposed by Burland (1973) with a correction for OCR
        proposed by Flaate&Selnes (1977).


- Driven in cohesionless soil:

    - Base limit capacity:
        the theoretical value should be q_lim = N_q*sigma_v0' where sigma_v0' is the vertical effective stress
        at the base of the pile, but given the high variability of N_q on the basis of the failure mechanism 
        Kulhawy (1984) and Fleming & al. (1985) suggest the following procedure:
            1. A first approximation of N_q is evalued on the basis of Berezantzev (1961);
            2. p' = sigma_v0'*sqrt(N_q);
            3. phi' = phi_cv'+3*(DR*(10-ln(p'))-1), formula proposed by Bolton (1986)
            4. evaluation of N_q accordingly to point 1.
            Repeat until convergence.
        Alternatively if a CPT or STP test have been performed:
            q_lim=q_c=0.4*N_spt
        Moreover, this value is valid only if the base is indented in the strata for more than 10D. If not, being
        L_c the indentation length, the correct value is q_lim,R=(L_B*q_lim)/(10*D)
        If the strata has limited thickness and if the base is at less than 10D from the strata below (which has a limit
        capacity of q_0), the correct value is q_lim,R=q_0+(q_lim-q_0)*H/(10*D), where H is the distance of the base of
        the pile from the strata below.
        
    - Lateral limit capacity:
    

- Drilled in cohesive soil:

    - Base limit capacity:
        Q_b=q_lim*A_b=(c_u*N_c+sigma_v0)*A_b
        where N_c=9 due to the depth of the base of the pile, c_u the undrained cohesion, sigma_v0 is the vertical
        total load at the base of the pile and A_b is the area of the base of the pile.
        For drilled piles this value is corrected with the coefficient proposed by Meyeroff (1983)
        R_c=(D+1)/(2*D+1)<=1
        where D is the diameter of the pile.
        
    - Lateral limit capacity:
    fs = (sigma_v0 - u) * tan(phi) * ((1 + K_0) / 2)
    where phi is the friction angle, sigma_v0 is the total vertical stress at the base of the pile, K_0=(1-sin(phi)).
    This formulation has been proposed by Fleming et al. (1985)

- Drilled in cohesionless soil:
    - Base limit capacity:
    - Lateral limit capacity:



"""



import numpy as np
import scipy.interpolate


class pile:
    def __init__(self, bottom, phi, c, cu, OCR, g_soil):
        self.bottom = bottom  # depth of the bottom of the strata
        self.phi = phi  # drained friction angle
        self.c = c  # drained cohesion
        self.cu = cu  # undrained cohesion
        self.OCR = OCR  # Over Consolidation Ratio
        self.g_soil = g_soil  # unit weight of soil


class watertable:
    def __init__(self, depth):
        self.depth = depth  # depth of the watertable


class pile:
    def __init__(self, method, diameter, length, g_cls=24):
        self.method = method  # method = "drilled" or "driven"
        self.diameter = diameter  # diameter in meters
        self.length = length  # length in meters
        self.g_cls = g_cls  # g_cls specific weight of concrete in kN/m3

def cohesive_base_limit_load(self):
    Ab = np.pi * (pile.diameter ** 2) / 4
    sigma_vo = self.g_soil * self.length


        # Coefficient proposed by Meyeroff (1983)
        self.Rc = 0
        if self.method == "driven":
            self.Rc = (self.diameter + 0.5) / (2 * self.diameter)
        elif self.method == "drilled":
            self.Rc = (self.diameter + 1) / (2 * self.diameter + 1)
        else:
            print("Error in method selection")
        Qb_lim = self.Rc * self.Ab * (self.cu * 9 + self.sigma_vo)
        print(Qb_lim)


# LOAD TRANSFER CURVES by REESE & O'NEIL 1989
# loc is the location: it can be "base" or "side"
# soil_type can be "cohesive" or "cohesionless"
class LT:
    def __init__(self, loc, soil_type):
        self.LT = 0
        self.loc = loc
        self.soil_type = soil_type
        if soil_type == "cohesive":
            if loc == "base":
                LT_ch_base_x = (0.000, 0.250, 0.500, 1.000, 1.300, 1.500, 2.000, 2.500, 3.000, 3.500, 4.000, 4.500,
                                5.000, 5.500, 6.000, 8.000, 10.000)
                LT_ch_base_y = (0.000, 0.150, 0.300, 0.555, 0.650, 0.700, 0.800, 0.860, 0.900, 0.925, 0.945, 0.955,
                                0.965, 0.970, 0.975, 0.980, 0.980)
                self.LT = scipy.interpolate.interp1d(LT_ch_base_x, LT_ch_base_y)
            elif loc == "side":
                LT_ch_side_x = (0.000, 0.030, 0.070, 0.100, 0.150, 0.200, 0.250, 0.300, 0.350, 0.400, 0.500, 0.600,
                                0.700, 0.800, 0.900, 1.000, 1.100, 1.500, 1.800, 2.000)
                LT_ch_side_y = (0.000, 0.100, 0.280, 0.400, 0.600, 0.730, 0.800, 0.850, 0.890, 0.910, 0.940, 0.955,
                                0.960, 0.955, 0.950, 0.945, 0.935, 0.890, 0.855, 0.830)
                self.LT = scipy.interpolate.interp1d(LT_ch_side_x, LT_ch_side_y)
            else:
                print("error in loc definition")
        elif soil_type == "cohesionless":
            if loc == "base":
                LT_cl_base_x = (0.000, 0.500, 1.000, 1.500, 2.000, 2.500, 3.000, 3.500, 4.000, 4.500, 5.000, 5.500,
                                6.000, 6.500, 7.000, 7.500, 8.000, 8.500, 9.000, 9.500, 10.000, 10.500, 11.000)
                LT_cl_base_y = (0.000, 0.180, 0.320, 0.450, 0.570, 0.670, 0.750, 0.820, 0.880, 0.940, 1.000, 1.050,
                                1.100, 1.150, 1.200, 1.240, 1.290, 1.330, 1.370, 1.410, 1.450, 1.500, 1.540)
                self.LT = scipy.interpolate.interp1d(LT_cl_base_x, LT_cl_base_y)
            elif loc == "side":
                LT_cl_side_x = (0.000, 0.030, 0.070, 0.100, 0.150, 0.200, 0.250, 0.300, 0.350, 0.400, 0.500, 0.600,
                                0.700, 0.800, 0.900, 1.000, 1.100, 1.500, 1.800)
                LT_cl_side_y = (0.000, 0.100, 0.270, 0.350, 0.450, 0.550, 0.650, 0.730, 0.800, 0.840, 0.900, 0.930,
                                0.950, 0.960, 0.970, 0.970, 0.970, 0.950, 0.920)
                self.LT = scipy.interpolate.interp1d(LT_cl_side_x, LT_cl_side_y)
            else:
                print("error in loc definition")
        else:
            print("error in soil_type definition")


# DEFINITION OF THE BASE CAPACITY
Qb = Qb_lim * TL_ch_interp_base((s_adm / 10) / D)

# DEFINITION OF THE LATERAL CAPACITY

# Lateral area
fs = 0
As = np.pi * D * L
if method == "driven":
    # Formulation by Burland 1973 with correction for OCR proposed by Flaate & Selnes 1977
    fs = (1 - np.sin(phi)) * np.tan(phi) * (sigma_vo - u) * OCR ** 0.5
elif method == "drilled":
    # Formulation by Fleming et al. 1985
    fs = (sigma_vo - u) * np.tan(np.deg2rad(phi)) * ((1 + (1 - np.sin(np.deg2rad(phi)))) / 2)
else:
    print("Error in method selection")

# Compute the limit and the admissible capacity
Qs_lim = fs * As
Qs = Qs_lim * TL_ch_interp_side((s_adm / 10) / D)

# TOTAL CAPACITY

W = Ab * L * g_cls
Qt = Qs_lim + Qb_lim - W

# PRINT RESULTS

print("Capacità portante alla base limite: " + str(round(Qb_lim, 2)) + " kN")
print(TL_ch_interp_base((s_adm / 10) / D))
print("Capacità portante alla base ammissibile: " + str(round(Qb, 2)) + " kN")
print("Capacità portante laterale limite: " + str(round(Qs_lim, 2)) + " kN")
print(TL_ch_interp_side((s_adm / 10) / D))
print("Capacità portante laterale ammissibile: " + str(round(Qs, 2)) + " kN")
print("Capacità portante totale: " + str(round(Qt, 2)) + " kN")
"""
